# creates a cronus package
# it will also create a prop file

###########################################
# function to clean up and exit
###########################################
clean() {
    if [[ -e $CRONUS_FILE ]]; then
        rm $CRONUS_FILE
    fi

    if [[ -e $PROP_FILE ]]; then
        rm $PROP_FILE
    fi
}

quit() {
    clean
    exit -1
}

# function to check package platform (architectcutre and os flavor)
checkplat() {

    ARCH=$(uname -m | sed 's/x86_//;s/i[3-6]86/32/')

    case $(uname -m) in
    x86_64)
        ARCH=x64  # or AMD64 or Intel64 or whatever
        ;;
    i*86)
        ARCH=x86  # or IA32 or Intel32 or whatever
        ;;
    *)
        # leave ARCH as-is
        ;;
    esac

    echo "${ARCH}"

}

usage() {
    echo ""
    echo "Usage: wget -qO- 'http://cronuspaas.github.io/downloads/package_cronus' | DIR=app_root [appname=<appname>] [version=<version>] [platform=<platform>] [pkgsrc=<files_include_in_pkg>] bash"
    echo ""
    echo "cronus pakcage naming convention: <appname>-<version>.<platform>.cronus"
    echo " appname: application name"
    echo " version: application version, format is major.minor.increment. Default is 1.0.timestamp"
    echo " platform: packaging platform. Default is 'ARCH_OS' of the system"
    echo ""
    echo "examples:"
    echo " wget -qO- 'http://cronuspaas.github.io/downloads/package_cronus'  DIR=~/my_proj bash"
    echo ""
    exit -1
}

###########################################
# argument parsing and validation
###########################################

if [[ -z $DIR ]]
then
    usage
fi


if [[ -d $DIR ]]; then
	echo "Attempting to create cronus package out of $DIR"
	echo "" 
else
	echo "$DIR is not a valid path"
	echo ""
	exit -1;
fi

if [[ -z $platform ]]; then
	platform=$(checkplat)
fi
echo "Use platform=$platform"

if [[ -z $appname ]]; then
        appname=$(cd ${DIR} && echo ${PWD##*/})
fi
echo "Use appname=$appname"

if [[ -z $version ]]; then
        version="1.0.`date +%Y%m%d%H%M`"
fi
echo "Use version=$version"

if [[ -z "$pkgsrc" ]]; then
	pkgsrc=$(ls -A $DIR)
fi
echo "Will package $pkgsrc"

CRONUS_NAME="$appname-$version.$platform.cronus"
CRONUS_FILE="$appname-$version.$platform.cronus"
PROP_FILE="$appname-$version.$platform.cronus.prop"
CRONUS_PROP="$DIR/cronus/cronus.prop"

if [[ ! -r $CRONUS_PROP ]]; then
    echo "Error: unable to find $CRONUS_PROP"
    exit -1
fi

for key in 'description' 'contact'
do
    grep "\"$key\":" $CRONUS_PROP > /dev/null || {
        echo "Error: Unable to find $key in $CRONUS_PROP"
        exit -1
    }
done

for key in 'name' 'md5' 'size'
do
    grep "\"$key\":" $CRONUS_PROP || grep "\[\[\[$key\]\]\]" > /dev/null || {
        echo "Error: Unable to find variable ($key) in $CRONUS_PROP"
        exit -1
    }
done

####################################################
# remove the old packages
####################################################
clean

####################################################
# create the cronus package
####################################################

echo "Creating $CRONUS_FILE..."
echo ""
echo "tar -h --preserve-permissions --ignore-failed-read -czf $CRONUS_FILE --directory $DIR $pkgsrc"
tar -h --preserve-permissions --ignore-failed-read -czf $CRONUS_FILE --directory $DIR $pkgsrc || {
    echo "Error: Did not successfully tar the file ($CRONUS_FILE)"
    quit
}

#########################################
# create the prop file
#########################################

echo ""
echo "Creating $PROP_FILE..."
echo ""

# change the parameters
if [[ $(uname) == 'Darwin' ]]; then
    SIZE=$(stat -f '%z' $CRONUS_FILE)
else
    SIZE=$(du -b $CRONUS_FILE | cut -f 1)
fi
MD5=$(md5sum $CRONUS_FILE | cut -d " " -f 1)
#Correcting for Mac
if [ ${#MD5} == 0 ]
  then MD5=$(md5 $CRONUS_FILE | cut -d " " -f 4)
fi

# move the cronus prop
cp $CRONUS_PROP $PROP_FILE || {
    echo "Unable to copy $CRONUS_PROP $PROP_FILE"
    quit
}

sed -e "s/\[\[\[size\]\]\]/$SIZE/" $PROP_FILE > ${PROP_FILE}.tmp || {
    echo "Unable to replace size in $PROP_FILE"
    quit
}
mv ${PROP_FILE}.tmp $PROP_FILE

sed -e "s/\[\[\[name\]\]\]/$CRONUS_NAME/" $PROP_FILE > ${PROP_FILE}.tmp || {
    echo "Unable to replace name in $PROP_FILE"
    quit
}
mv ${PROP_FILE}.tmp $PROP_FILE

sed -e "s/\[\[\[md5\]\]\]/$MD5/" $PROP_FILE > ${PROP_FILE}.tmp || {
    echo "Unable to replace name in $PROP_FILE"
    quit
}
mv ${PROP_FILE}.tmp $PROP_FILE

echo ""
echo "Finished."

