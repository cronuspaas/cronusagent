description     "Cronus Agent"

start on runlevel [2345]
stop on runlevel [!2345]

respawn

# First define what is ROOT directory and USER to run as
env ROOT="ROOT_DIR/cronus/software"
env USER="cronus"

pre-start script

	# Check if agent.pid exists
        if [ -f $ROOT/service_nodes/agent/manifests/active/agent/agent.pid ]
        then
                /usr/bin/logger -s -p daemon.error "Cronus: agent.pid exists. Will attempt to bring down the agent first if it is up and remove the pid file"
		exec su - $USER -c $ROOT/service_nodes/agent/manifests/active/agent/cronus/scripts/shut
		rm -f $ROOT/service_nodes/agent/manifests/active/agent/agent.pid
	else
		# Check if the given user exists
		id $USER >/dev/null 2>&1 || {
			/usr/bin/logger -s -p daemon.error "Cronus: Agent cannot be started because there is no such user $USER"
			stop
			exit 1
		}

	   	# Find the ownership of paster.log
		FILE_OWNER=$( ls -l $ROOT | grep -v total | head -1 | awk '{print $3}')
		if [ X"$FILE_OWNER" != X"$USER" ]
		then
			/usr/bin/logger -s -p daemon.error "Cronus: Agent cannot be started because the file '$ROOT' is not owned by $USER - fileowner is $FILE_OWNER"
			stop
			exit 1
		fi

		# Check if prod.ini file exists
		if [ ! -f $ROOT/service_nodes/agent/manifests/active/agent/conf/prod.ini ]
		then
			/usr/bin/logger -s -p daemon.error "Cronus: Unable to find configuration file $ROOT/service_nodes/agent/manifests/active/agent/conf/prod.ini"
    			stop
			exit 1
		fi
        fi
end script


script

	if [ -f /usr/bin/setuidgid ]; then
		cd $ROOT/service_nodes/agent/manifests/active/agent
		exec setuidgid $USER $ROOT/service_nodes/agent/manifests/active/agent/cronus/scripts/startup nodaemon
	else
		exec  su - $USER -c "$ROOT/service_nodes/agent/manifests/active/agent/cronus/scripts/startup nodaemon"
	fi

end script

post-stop exec su - $USER -c $ROOT/service_nodes/agent/manifests/active/agent/cronus/scripts/shut



